{"paragraphs":[{"text":"%md\n> Exploring data, training a model, and making predictions\n\n## Welcome to Getting Started with InsightEdge\n\nThis sample application uses flight delay data to make binary predictions (yes/no) about which flights are likely to get delayed. It takes you through the following steps:\n\n* Fetching data and loading it to the InsightEdge platform\n* Exploring the data using Spark and SQL queries\n* Enriching the data and processing it to get the relevant feature vector\n* Building and training a Machine Learning (ML) model for predicting flight delays\n* Testing the ML model with real data\n\nTo run the code and see the results in the notebook, click  the `Run` icon in each paragraph (located in the top right corner).\n\n### Fetching and Exploring the Data\n\nFor this application, we'll load sample data from a CSV file to the data grid. We can then explore it a bit using SQL queries. \n\n### Processing the Data for the ML Model\n\nWe will use InsightEdge Spark queries to transform the flight data information to get what we need to train the ML model, so that it can make accurate flight delay predictions. The initial data includes (per flight) date, airport of origin, destination, airline, departure delay, etc. This data will then be enriched with basic weather data at the airport of origin at the time of departure.\n\n### Selecting an ML Model\n\nThere are many ML models available. The model that we felt is best suited for this task is the `Random (Decision) Forest`. \nFlight delays are measured in minutes; a positive number is the delay in minutes, while a negative number indicates a flight that was early.\nWe will use data such as the month, day and departure time as well as origin and destination airports as features we will feed into an ML model, in our case, Random Forest, to train it for best accuracy. \nWe will also supplement the feature vector with weather related data such as rain, wind and temperature. \n\n##### We will use:\n*2017 data for training our model\n*2018 data for evaluating our model accuracy\n*Then we will stream 2019 data and predict if the flight will get delayed.","user":"anonymous","dateUpdated":"2019-09-23T12:56:26+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"colWidth":12,"editorMode":"ace/mode/markdown","fontSize":9,"editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<blockquote>\n  <p>Exploring data, training a model, and making predictions</p>\n</blockquote>\n<h2>Welcome to Getting Started with InsightEdge</h2>\n<p>This sample application uses flight delay data to make binary predictions (yes/no) about which flights are likely to get delayed. It takes you through the following steps:</p>\n<ul>\n  <li>Fetching data and loading it to the InsightEdge platform</li>\n  <li>Exploring the data using Spark and SQL queries</li>\n  <li>Enriching the data and processing it to get the relevant feature vector</li>\n  <li>Building and training a Machine Learning (ML) model for predicting flight delays</li>\n  <li>Testing the ML model with real data</li>\n</ul>\n<p>To run the code and see the results in the notebook, click the <code>Run</code> icon in each paragraph (located in the top right corner).</p>\n<h3>Fetching and Exploring the Data</h3>\n<p>For this application, we&rsquo;ll load sample data from a CSV file to the data grid. We can then explore it a bit using SQL queries. </p>\n<h3>Processing the Data for the ML Model</h3>\n<p>We will use InsightEdge Spark queries to transform the flight data information to get what we need to train the ML model, so that it can make accurate flight delay predictions. The initial data includes (per flight) date, airport of origin, destination, airline, departure delay, etc. This data will then be enriched with basic weather data at the airport of origin at the time of departure.</p>\n<h3>Selecting an ML Model</h3>\n<p>There are many ML models available. The model that we felt is best suited for this task is the <code>Random (Decision) Forest</code>.<br/>Flight delays are measured in minutes; a positive number is the delay in minutes, while a negative number indicates a flight that was early.<br/>We will use data such as the month, day and departure time as well as origin and destination airports as features we will feed into an ML model, in our case, Random Forest, to train it for best accuracy.<br/>We will also supplement the feature vector with weather related data such as rain, wind and temperature. </p>\n<h5>We will use:</h5>\n<p>*2017 data for training our model<br/>*2018 data for evaluating our model accuracy<br/>*Then we will stream 2019 data and predict if the flight will get delayed.</p>\n</div>"}]},"apps":[],"jobName":"paragraph_1569132212501_1644544188","id":"20190821-232519_1860033659","dateCreated":"2019-09-22T06:03:32+0000","dateStarted":"2019-09-23T12:56:26+0000","dateFinished":"2019-09-23T12:56:26+0000","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:172"},{"text":"%md\r\n### Fetching and Exploring the Data\r\n\r\nThe data is in CSV file format. (If the data is not available for some reason, you can download it from: <https://insightedge-gettingstarted.s3.amazonaws.com/flightdelays20172018.csv.zip>)\r\nAfter the data is loaded, explore the data with the provided SQL statements to understand the schema and how it behaves.","user":"anonymous","dateUpdated":"2019-09-23T11:43:07+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"colWidth":12,"editorMode":"ace/mode/markdown","fontSize":9,"editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h3>Fetching and Exploring the Data</h3>\n<p>The data is in CSV file format. (If the data is not available for some reason, you can download it from: <a href=\"https://insightedge-gettingstarted.s3.amazonaws.com/flightdelays20172018.csv.zip\">https://insightedge-gettingstarted.s3.amazonaws.com/flightdelays20172018.csv.zip</a>)<br/>After the data is loaded, explore the data with the provided SQL statements to understand the schema and how it behaves.</p>\n</div>"}]},"apps":[],"jobName":"paragraph_1569132212510_-242278630","id":"20190826-021256_100418820","dateCreated":"2019-09-22T06:03:32+0000","dateStarted":"2019-09-23T11:42:57+0000","dateFinished":"2019-09-23T11:42:57+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:173"},{"text":"%define\npackage model.v1\n\nimport com.gigaspaces.metadata._\nimport com.gigaspaces.metadata.index.SpaceIndexType;\nimport java.lang\nimport scala.beans.{BeanProperty}\nimport org.insightedge.scala.annotation._\nimport org.insightedge.spark.implicits.all._\n\n\n//Describe the data as Scala Case Class\n\ncase class FlightDelaysWithWeather(\n  @BeanProperty \n  @SpaceId\n  var id: String,\n  @BeanProperty \n  @SpaceIndex\n  var carrier: String,\n  @BeanProperty \n  @SpaceIndex\n  var flightNumber: String,\n  @SpaceIndex\n  @BeanProperty \n  var year: Integer,\n  @BeanProperty \n  var month: String,\n  @BeanProperty \n  var dayofMonth: String,\n  @BeanProperty \n  var dayOfWeek: String,\n  @BeanProperty \n  var crsDepTime: String,\n  @SpaceIndex\n  @BeanProperty \n  var depDelay15: java.lang.Double,\n  @BeanProperty \n  var depDelay: java.lang.Double,\n  @SpaceIndex\n  @BeanProperty \n  var origin: String,\n  @BeanProperty \n  var dest: String,\n  @BeanProperty \n  var awnd: String,\n  @BeanProperty \n  var prcp: String,\n  @BeanProperty \n  var snow: String,\n  @BeanProperty \n  var tmax: String,\n  @BeanProperty \n  var tmin: String,\n  @BeanProperty \n  var cancelled: String,\n    @BeanProperty \n  var date: Integer) {\n  def this() = this(null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null)\n}\n\n","user":"anonymous","dateUpdated":"2019-09-22T06:03:32+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"res0: org.apache.zeppelin.dep.Dependency = org.apache.zeppelin.dep.Dependency@689e5dd6\n"}]},"apps":[],"jobName":"paragraph_1569132212513_-876466996","id":"20190901-004515_1420239656","dateCreated":"2019-09-22T06:03:32+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:174"},{"title":"Load the FlightDelay data","text":"%spark\n//explore data before we continue\n//WN - SouthWest, OO - SkyWest Airlines Inc., \"EV\" - ExpressJet Airlines LLC, \"B6\" - JetBlue, \"AS\" Alaska Airlines Inc. \"NK\" - Spirit Air Lines\", \"F9\" - \"Frontier Airlines Inc.\"\nval airlines = List (\"UA\",\"OO\",\"B6\",\"NK\", \"F9\")\n// ORD - Chicago, DFW - Dallas, DEN - Denver, SFO - San Francisco\nval airports = List (\"ORD\",\"DFW\",\"DEN\",\"SFO\")\nval flightDelaysDataFrame = sqlContext.read.option(\"header\", \"true\").option(\"inferschema\", \"true\").csv(\"/opt/gigaspaces/flightdelays/flightdelays20172018.csv\").filter($\"Reporting_Airline\".isin(airlines:_*)).filter($\"Origin\".isin(airports:_*)).filter($\"cancelled\" === 0.0).filter($\"DayofMonth\" < 20.0)\nflightDelaysDataFrame.printSchema()\n// Create a temp view that we can query by SQL\nflightDelaysDataFrame.createOrReplaceTempView(\"FlightDelays\")\n","user":"anonymous","dateUpdated":"2019-09-23T11:44:17+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"editorHide":false,"title":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"ERROR","msg":[{"type":"TEXT","data":"org.apache.spark.sql.AnalysisException: Path does not exist: file:/opt/gigaspaces/flightdelays/flightdelays20172018.csv;\n  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$org$apache$spark$sql$execution$datasources$DataSource$$checkAndGlobPathIfNecessary$1.apply(DataSource.scala:558)\n  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$org$apache$spark$sql$execution$datasources$DataSource$$checkAndGlobPathIfNecessary$1.apply(DataSource.scala:545)\n  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)\n  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)\n  at scala.collection.immutable.List.foreach(List.scala:392)\n  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)\n  at scala.collection.immutable.List.flatMap(List.scala:355)\n  at org.apache.spark.sql.execution.datasources.DataSource.org$apache$spark$sql$execution$datasources$DataSource$$checkAndGlobPathIfNecessary(DataSource.scala:545)\n  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:359)\n  at org.apache.spark.sql.DataFrameReader.loadV1Source(DataFrameReader.scala:223)\n  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:211)\n  at org.apache.spark.sql.DataFrameReader.csv(DataFrameReader.scala:617)\n  at org.apache.spark.sql.DataFrameReader.csv(DataFrameReader.scala:468)\n  ... 47 elided\n"}]},"apps":[],"jobName":"paragraph_1569132212513_-398922180","id":"20190812-123228_1439056817","dateCreated":"2019-09-22T06:03:32+0000","dateStarted":"2019-09-23T11:44:17+0000","dateFinished":"2019-09-23T11:44:48+0000","status":"ERROR","progressUpdateIntervalMs":500,"$$hashKey":"object:175"},{"title":"Review a sample of the data","text":"%sql\nselect * from FlightDelays order by DepDelay Desc limit 5\n","user":"anonymous","dateUpdated":"2019-09-23T11:44:38+0000","config":{"editorSetting":{"language":"sql","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/sql","fontSize":9,"editorHide":false,"title":true,"results":{"0":{"graph":{"mode":"table","height":300,"optionOpen":false,"setting":{"table":{"tableGridState":{"columns":[{"name":"Year","visible":true,"width":150,"sort":{},"filters":[{}],"pinned":""},{"name":"Month","visible":true,"width":150,"sort":{},"filters":[{}],"pinned":""},{"name":"DayofMonth","visible":true,"width":150,"sort":{},"filters":[{}],"pinned":""},{"name":"DayOfWeek","visible":true,"width":"*","sort":{},"filters":[{}],"pinned":""},{"name":"Reporting_Airline","visible":true,"width":"*","sort":{},"filters":[{}],"pinned":""},{"name":"Tail_Number","visible":true,"width":"*","sort":{},"filters":[{}],"pinned":""},{"name":"Origin","visible":true,"width":"*","sort":{},"filters":[{}],"pinned":""},{"name":"Dest","visible":true,"width":"*","sort":{},"filters":[{}],"pinned":""},{"name":"CRSDepTime","visible":true,"width":"*","sort":{},"filters":[{}],"pinned":""},{"name":"DepDelay","visible":true,"width":"*","sort":{},"filters":[{}],"pinned":""},{"name":"DepDel15","visible":true,"width":"*","sort":{},"filters":[{}],"pinned":""},{"name":"cancelled","visible":true,"width":"*","sort":{"priority":0,"direction":"desc"},"filters":[{}],"pinned":""}],"scrollFocus":{},"selection":[],"grouping":{"grouping":[],"aggregations":[],"rowExpandedStates":{}},"treeView":{},"pagination":{"paginationCurrentPage":1,"paginationPageSize":250}},"tableColumnTypeState":{"names":{"Year":"string","Month":"string","DayofMonth":"string","DayOfWeek":"string","Reporting_Airline":"string","Tail_Number":"string","Flight_Number":"string","Origin":"string","Dest":"string","CRSDepTime":"string","DepDelay":"string","DepDel15":"string","cancelled":"string"},"updated":false},"tableOptionSpecHash":"[{\"name\":\"useFilter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable filter for columns\"},{\"name\":\"showPagination\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable pagination for better navigation\"},{\"name\":\"showAggregationFooter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable a footer for displaying aggregated values\"}]","tableOptionValue":{"useFilter":false,"showPagination":false,"showAggregationFooter":false},"updated":false,"initialized":false}},"commonSetting":{}}}},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"ERROR","msg":[{"type":"TEXT","data":"Table or view not found: FlightDelays; line 1 pos 14\nset zeppelin.spark.sql.stacktrace = true to see full stacktrace"}]},"apps":[],"jobName":"paragraph_1569132212514_-702468098","id":"20190818-160607_881523454","dateCreated":"2019-09-22T06:03:32+0000","dateStarted":"2019-09-23T11:44:38+0000","dateFinished":"2019-09-23T11:44:49+0000","status":"ERROR","progressUpdateIntervalMs":500,"$$hashKey":"object:176"},{"title":"Total number of flights vs. number of delayed flights (by airport of origin)","text":"%sql\n\nselect Origin, count(*) as TotalFlights, SUM(DepDel15) as DelayedFlightsCount from FlightDelays group by Origin order by  DelayedFlightsCount/TotalFlights desc limit 15\n","user":"anonymous","dateUpdated":"2019-09-23T11:45:17+0000","config":{"tableHide":false,"editorSetting":{"language":"sql","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/sql","fontSize":9,"editorHide":false,"title":true,"results":{"0":{"graph":{"mode":"multiBarChart","height":300,"optionOpen":false,"setting":{"table":{"tableGridState":{},"tableColumnTypeState":{"names":{"Origin":"string","TotalFlights":"string","DelayedFlights":"string"},"updated":false},"tableOptionSpecHash":"[{\"name\":\"useFilter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable filter for columns\"},{\"name\":\"showPagination\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable pagination for better navigation\"},{\"name\":\"showAggregationFooter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable a footer for displaying aggregated values\"}]","tableOptionValue":{"useFilter":false,"showPagination":false,"showAggregationFooter":false},"updated":false,"initialized":false},"multiBarChart":{"rotate":{"degree":"-45"},"xLabelStatus":"default"},"stackedAreaChart":{"rotate":{"degree":"-45"},"xLabelStatus":"default"},"lineChart":{"rotate":{"degree":"-45"},"xLabelStatus":"default"}},"commonSetting":{},"keys":[{"name":"Origin","index":0,"aggr":"sum"}],"groups":[],"values":[{"name":"TotalFlights","index":1,"aggr":"sum"},{"name":"DelayedFlightsCount","index":2,"aggr":"sum"}]},"helium":{}}},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"ERROR","msg":[{"type":"TEXT","data":"Table or view not found: FlightDelays; line 1 pos 83\nset zeppelin.spark.sql.stacktrace = true to see full stacktrace"}]},"apps":[],"jobName":"paragraph_1569132212515_-111721668","id":"20190814-105136_1961434103","dateCreated":"2019-09-22T06:03:32+0000","dateStarted":"2019-09-23T11:45:17+0000","dateFinished":"2019-09-23T11:45:17+0000","status":"ERROR","progressUpdateIntervalMs":500,"$$hashKey":"object:177"},{"title":"Airport popularity","text":"%sql\nselect origin, count(*) as vol from  FlightDelays group by origin order by vol desc","user":"anonymous","dateUpdated":"2019-09-22T06:03:32+0000","config":{"editorSetting":{"language":"sql","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/sql","fontSize":9,"editorHide":false,"title":true,"results":{"0":{"graph":{"mode":"pieChart","height":300,"optionOpen":false,"setting":{"table":{"tableGridState":{},"tableColumnTypeState":{"names":{"origin":"string","vol":"string"},"updated":false},"tableOptionSpecHash":"[{\"name\":\"useFilter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable filter for columns\"},{\"name\":\"showPagination\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable pagination for better navigation\"},{\"name\":\"showAggregationFooter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable a footer for displaying aggregated values\"}]","tableOptionValue":{"useFilter":false,"showPagination":false,"showAggregationFooter":false},"updated":false,"initialized":false}},"commonSetting":{}},"helium":{}}},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TABLE","data":"origin\tvol\nORD\t203768\nDEN\t166684\nSFO\t127175\nDFW\t27611\n"},{"type":"TEXT","data":""}]},"apps":[],"jobName":"paragraph_1569132212516_43692228","id":"20190814-130922_1525095978","dateCreated":"2019-09-22T06:03:32+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:178"},{"text":"%md\n\n### Transforming the Flight Data\n\nThis step applies InsightEdge capabilities to transform the data into the required format, and prepare it for enrichment with the weather data. the data is processed as follows:\n\n* Configure an InsightEdge context\n* Provide InsightEdge with Type information about the data that was loaded\n* Load the data to the InsightEdge in-memory store (to speed up data access)\n","user":"anonymous","dateUpdated":"2019-09-23T12:55:36+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"colWidth":12,"editorMode":"ace/mode/markdown","fontSize":9,"editorHide":true,"results":{},"enabled":true,"title":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h3>Transforming the Flight Data</h3>\n<p>This step applies InsightEdge capabilities to transform the data into the required format, and prepare it for enrichment with the weather data. the data is processed as follows:</p>\n<ul>\n  <li>Configure an InsightEdge context</li>\n  <li>Provide InsightEdge with Type information about the data that was loaded</li>\n  <li>Load the data to the InsightEdge in-memory store (to speed up data access)</li>\n</ul>\n</div>"}]},"apps":[],"jobName":"paragraph_1569132212517_439314661","id":"20190826-022330_1347205260","dateCreated":"2019-09-22T06:03:32+0000","dateStarted":"2019-09-23T12:55:36+0000","dateFinished":"2019-09-23T12:55:36+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:179"},{"title":"Initialize Spark with InsightEdge context ","text":"%spark\n\nimport org.insightedge.spark.implicits.all._\nimport org.insightedge.spark.context.InsightEdgeConfig\n\n//Change space name here if not working with default\nval ieConfig = new InsightEdgeConfig(\"demo\")\n\nsc.initializeInsightEdgeContext(ieConfig)\n","user":"anonymous","dateUpdated":"2019-09-22T06:03:32+0000","config":{"tableHide":true,"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"title":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"import org.insightedge.spark.implicits.all._\nimport org.insightedge.spark.context.InsightEdgeConfig\nieConfig: org.insightedge.spark.context.InsightEdgeConfig = InsightEdgeConfig(demo,None,None)\nres2: org.apache.spark.SparkContext = org.apache.spark.SparkContext@38a5e9f5\n"}]},"apps":[],"jobName":"paragraph_1569132212518_-1472339429","id":"20190814-133229_440702495","dateCreated":"2019-09-22T06:03:32+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:180"},{"title":"Register the Type with the data grid","text":"/*import com.gigaspaces.metadata._\nimport com.gigaspaces.metadata.index.SpaceIndexType;\nimport java.lang\n\n\nval typeDescriptor: SpaceTypeDescriptor = new SpaceTypeDescriptorBuilder(\"FlightDelay\").idProperty(\"id\", true)\n                .addFixedProperty(\"Origin\", \"java.lang.String\")\n                .addFixedProperty(\"Year\", \"java.lang.Integer\")\n                .addFixedProperty(\"DayofMonth\", \"java.lang.Integer\")\n                .addFixedProperty(\"DepDelay\", \"java.lang.Double\")\n                .addPropertyIndex(\"Origin\", SpaceIndexType.EQUAL)\n                .addPropertyIndex(\"Year\", SpaceIndexType.EQUAL)\n                .addFixedProperty(\"Tail_Number\", \"java.lang.String\")\n                .routingProperty(\"Tail_Number\")\n                .addPropertyIndex(\"DepDelay\", SpaceIndexType.ORDERED)\n                .create();\n        // Register type:\nsc.grid.getTypeManager().registerTypeDescriptor(typeDescriptor)\n\n\n\n*/","user":"anonymous","dateUpdated":"2019-09-23T11:45:33+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"editorHide":false,"title":true,"results":{"0":{"graph":{"mode":"table","height":88,"optionOpen":false}}},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[]},"apps":[],"jobName":"paragraph_1569132212518_1448837505","id":"20190814-105537_1546549879","dateCreated":"2019-09-22T06:03:32+0000","dateStarted":"2019-09-23T11:45:33+0000","dateFinished":"2019-09-23T11:45:34+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:181"},{"title":"Write the FlightDelay data to the in-memory store","text":"%spark\nimport org.apache.spark.sql.SaveMode\nimport model.v1._\n\nprint(\"Writing to in-memory store \" + flightDelaysDataFrame.count + \"entries\")\n\nval flightDelaysRDD = flightDelaysDataFrame.map{rec => FlightDelaysWithWeather(\"\"+rec.getAs(\"Year\")+\":\"+rec.getAs(\"Month\")+\":\"+rec(2)+\":\"+rec.getAs(\"DayOfWeek\")+\":\"+rec.getAs(\"CRSDepTime\")+\":\"+rec.getAs(\"Flight_Number\"), \"\"+rec.getAs(\"Reporting_Airline\") , \"\"+rec.getAs(\"Flight_Number\") ,(\"\"+rec.getAs(\"Year\")).toInt,\"\"+rec.getAs(\"Month\"),\"\"+rec(2),\"\"+rec.getAs(\"DayOfWeek\"),\"\"+rec.getAs(\"CRSDepTime\"),(\"\"+rec.getAs(\"DepDel15\")).toDouble,(\"\"+rec.getAs(\"DepDelay\")).toDouble,\"\"+rec.getAs(\"Origin\"),\"\"+rec.getAs(\"Dest\"), null, null, null, null, null, null, null)}\n\nflightDelaysRDD.rdd.saveToGrid()","user":"anonymous","dateUpdated":"2019-09-23T11:45:42+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"editorHide":false,"title":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"ERROR","msg":[{"type":"TEXT","data":"<console>:24: error: not found: value model\n       import model.v1._\n              ^\n<console>:28: error: not found: value flightDelaysDataFrame\n       val flightDelaysRDD = flightDelaysDataFrame.map{rec => FlightDelaysWithWeather(\"\"+rec.getAs(\"Year\")+\":\"+rec.getAs(\"Month\")+\":\"+rec(2)+\":\"+rec.getAs(\"DayOfWeek\")+\":\"+rec.getAs(\"CRSDepTime\")+\":\"+rec.getAs(\"Flight_Number\"), \"\"+rec.getAs(\"Reporting_Airline\") , \"\"+rec.getAs(\"Flight_Number\") ,(\"\"+rec.getAs(\"Year\")).toInt,\"\"+rec.getAs(\"Month\"),\"\"+rec(2),\"\"+rec.getAs(\"DayOfWeek\"),\"\"+rec.getAs(\"CRSDepTime\"),(\"\"+rec.getAs(\"DepDel15\")).toDouble,(\"\"+rec.getAs(\"DepDelay\")).toDouble,\"\"+rec.getAs(\"Origin\"),\"\"+rec.getAs(\"Dest\"), null, null, null, null, null, null, null)}\n                             ^\n<console>:28: error: not found: value FlightDelaysWithWeather\n       val flightDelaysRDD = flightDelaysDataFrame.map{rec => FlightDelaysWithWeather(\"\"+rec.getAs(\"Year\")+\":\"+rec.getAs(\"Month\")+\":\"+rec(2)+\":\"+rec.getAs(\"DayOfWeek\")+\":\"+rec.getAs(\"CRSDepTime\")+\":\"+rec.getAs(\"Flight_Number\"), \"\"+rec.getAs(\"Reporting_Airline\") , \"\"+rec.getAs(\"Flight_Number\") ,(\"\"+rec.getAs(\"Year\")).toInt,\"\"+rec.getAs(\"Month\"),\"\"+rec(2),\"\"+rec.getAs(\"DayOfWeek\"),\"\"+rec.getAs(\"CRSDepTime\"),(\"\"+rec.getAs(\"DepDel15\")).toDouble,(\"\"+rec.getAs(\"DepDelay\")).toDouble,\"\"+rec.getAs(\"Origin\"),\"\"+rec.getAs(\"Dest\"), null, null, null, null, null, null, null)}\n                                                              ^\n<console>:26: error: not found: value flightDelaysDataFrame\n       print(\"Writing to in-memory store \" + flightDelaysDataFrame.count + \"entries\")\n                                             ^\n"}]},"apps":[],"jobName":"paragraph_1569132212519_-918109107","id":"20190814-141337_971258379","dateCreated":"2019-09-22T06:03:32+0000","dateStarted":"2019-09-23T11:45:42+0000","dateFinished":"2019-09-23T11:45:42+0000","status":"ERROR","progressUpdateIntervalMs":500,"$$hashKey":"object:182"},{"title":"Query the data directly from the in-memory data grid","text":"%insightedge_jdbc\n\nselect * from FlightDelaysWithWeather limit 5\n","user":"anonymous","dateUpdated":"2019-09-23T11:45:57+0000","config":{"editorSetting":{"language":"sql","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/sql","fontSize":9,"editorHide":false,"title":true,"results":{"0":{"graph":{"mode":"table","height":300,"optionOpen":false,"setting":{"table":{"tableGridState":{},"tableColumnTypeState":{"names":{"awnd":"string","cancelled":"string","carrier":"string","crsDepTime":"string","date":"string","dayOfWeek":"string","dayofMonth":"string","depDelay":"string","depDelay15":"string","dest":"string","flightNumber":"string","id":"string","month":"string","origin":"string","prcp":"string","snow":"string","tmax":"string","tmin":"string","year":"string"},"updated":false},"tableOptionSpecHash":"[{\"name\":\"useFilter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable filter for columns\"},{\"name\":\"showPagination\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable pagination for better navigation\"},{\"name\":\"showAggregationFooter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable a footer for displaying aggregated values\"}]","tableOptionValue":{"useFilter":false,"showPagination":false,"showAggregationFooter":false},"updated":false,"initialized":false}},"commonSetting":{}}}},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"ERROR","msg":[{"type":"TEXT","data":"java.sql.SQLException: Error while executing SQL \"select * from FlightDelaysWithWeather limit 5\": From line 1, column 15 to line 1, column 37: Object 'FlightDelaysWithWeather' not found\n\tat org.apache.calcite.avatica.Helper.createException(Helper.java:56)\n\tat org.apache.calcite.avatica.Helper.createException(Helper.java:41)\n\tat org.apache.calcite.avatica.AvaticaStatement.executeInternal(AvaticaStatement.java:156)\n\tat org.apache.calcite.avatica.AvaticaStatement.execute(AvaticaStatement.java:209)\n\tat org.apache.commons.dbcp2.DelegatingStatement.execute(DelegatingStatement.java:291)\n\tat org.apache.commons.dbcp2.DelegatingStatement.execute(DelegatingStatement.java:291)\n\tat org.apache.zeppelin.jdbc.JDBCInterpreter.executeSql(JDBCInterpreter.java:718)\n\tat org.apache.zeppelin.jdbc.JDBCInterpreter.interpret(JDBCInterpreter.java:801)\n\tat org.apache.zeppelin.interpreter.LazyOpenInterpreter.interpret(LazyOpenInterpreter.java:103)\n\tat org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer$InterpretJob.jobRun(RemoteInterpreterServer.java:632)\n\tat org.apache.zeppelin.scheduler.Job.run(Job.java:188)\n\tat org.apache.zeppelin.scheduler.ParallelScheduler$JobRunner.run(ParallelScheduler.java:162)\n\tat java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)\n\tat java.util.concurrent.FutureTask.run(FutureTask.java:266)\n\tat java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180)\n\tat java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293)\n\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)\n\tat java.lang.Thread.run(Thread.java:748)\nCaused by: org.apache.calcite.runtime.CalciteContextException: From line 1, column 15 to line 1, column 37: Object 'FlightDelaysWithWeather' not found\n\tat sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)\n\tat sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)\n\tat sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)\n\tat java.lang.reflect.Constructor.newInstance(Constructor.java:423)\n\tat org.apache.calcite.runtime.Resources$ExInstWithCause.ex(Resources.java:463)\n\tat org.apache.calcite.sql.SqlUtil.newContextException(SqlUtil.java:804)\n\tat org.apache.calcite.sql.SqlUtil.newContextException(SqlUtil.java:789)\n\tat org.apache.calcite.sql.validate.SqlValidatorImpl.newValidationError(SqlValidatorImpl.java:4393)\n\tat org.apache.calcite.sql.validate.IdentifierNamespace.resolveImpl(IdentifierNamespace.java:162)\n\tat org.apache.calcite.sql.validate.IdentifierNamespace.validateImpl(IdentifierNamespace.java:167)\n\tat org.apache.calcite.sql.validate.AbstractNamespace.validate(AbstractNamespace.java:84)\n\tat org.apache.calcite.sql.validate.SqlValidatorImpl.validateNamespace(SqlValidatorImpl.java:939)\n\tat org.apache.calcite.sql.validate.SqlValidatorImpl.validateQuery(SqlValidatorImpl.java:920)\n\tat org.apache.calcite.sql.validate.SqlValidatorImpl.validateFrom(SqlValidatorImpl.java:2954)\n\tat org.apache.calcite.sql.validate.SqlValidatorImpl.validateFrom(SqlValidatorImpl.java:2939)\n\tat org.apache.calcite.sql.validate.SqlValidatorImpl.validateSelect(SqlValidatorImpl.java:3181)\n\tat org.apache.calcite.sql.validate.SelectNamespace.validateImpl(SelectNamespace.java:60)\n\tat org.apache.calcite.sql.validate.AbstractNamespace.validate(AbstractNamespace.java:84)\n\tat org.apache.calcite.sql.validate.SqlValidatorImpl.validateNamespace(SqlValidatorImpl.java:939)\n\tat org.apache.calcite.sql.validate.SqlValidatorImpl.validateQuery(SqlValidatorImpl.java:920)\n\tat org.apache.calcite.sql.SqlSelect.validate(SqlSelect.java:220)\n\tat org.apache.calcite.sql.validate.SqlValidatorImpl.validateScopedExpression(SqlValidatorImpl.java:895)\n\tat org.apache.calcite.sql.validate.SqlValidatorImpl.validate(SqlValidatorImpl.java:605)\n\tat org.apache.calcite.sql2rel.SqlToRelConverter.convertQuery(SqlToRelConverter.java:550)\n\tat org.apache.calcite.prepare.Prepare.prepareSql(Prepare.java:264)\n\tat org.apache.calcite.prepare.Prepare.prepareSql(Prepare.java:228)\n\tat org.apache.calcite.prepare.CalcitePrepareImpl.prepare2_(CalcitePrepareImpl.java:784)\n\tat org.apache.calcite.prepare.CalcitePrepareImpl.prepare_(CalcitePrepareImpl.java:639)\n\tat org.apache.calcite.prepare.CalcitePrepareImpl.prepareSql(CalcitePrepareImpl.java:609)\n\tat org.apache.calcite.jdbc.CalciteConnectionImpl.parseQuery(CalciteConnectionImpl.java:214)\n\tat org.apache.calcite.jdbc.CalciteMetaImpl.prepareAndExecute(CalciteMetaImpl.java:603)\n\tat org.apache.calcite.avatica.AvaticaConnection.prepareAndExecuteInternal(AvaticaConnection.java:638)\n\tat org.apache.calcite.avatica.AvaticaStatement.executeInternal(AvaticaStatement.java:149)\n\t... 16 more\nCaused by: org.apache.calcite.sql.validate.SqlValidatorException: Object 'FlightDelaysWithWeather' not found\n\tat sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)\n\tat sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)\n\tat sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)\n\tat java.lang.reflect.Constructor.newInstance(Constructor.java:423)\n\tat org.apache.calcite.runtime.Resources$ExInstWithCause.ex(Resources.java:463)\n\tat org.apache.calcite.runtime.Resources$ExInst.ex(Resources.java:572)\n\t... 44 more\n"}]},"apps":[],"jobName":"paragraph_1569132212521_-1883264937","id":"20190814-163709_2074768724","dateCreated":"2019-09-22T06:03:32+0000","dateStarted":"2019-09-23T11:45:52+0000","dateFinished":"2019-09-23T11:45:58+0000","status":"ERROR","progressUpdateIntervalMs":500,"$$hashKey":"object:183"},{"title":"Access the in-memory store using InsightEdge's predicate pushdown for better performance","text":"%spark\n\nval airports = List (\"ORD\",\"DFW\",\"DEN\",\"SFO\")\n\n\nval origin =  z.select(\"origin\", Seq((\"ORD\",\"O'hare International (chicago)\"),\n                                                  (\"DFW\",\"Dallas International\"),\n                                                  (\"DEN\", \"Denver\"), \n                                                  (\"SFO\", \"San Francissco\")))\nval filtered_df = spark.read.grid[FlightDelaysWithWeather].where(\"depDelay > 0 and origin = '\" + origin  + \"'\")\nfiltered_df.describe(\"depDelay\").show\n","user":"anonymous","dateUpdated":"2019-09-23T11:46:15+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"runOnSelectionChange":true,"title":true,"results":{},"enabled":true},"settings":{"params":{"carrier":"ORD","origin":"SFO","day":""},"forms":{}},"results":{"code":"ERROR","msg":[{"type":"TEXT","data":"<console>:32: error: value grid is not a member of org.apache.spark.sql.DataFrameReader\n       val filtered_df = spark.read.grid[FlightDelaysWithWeather].where(\"depDelay > 0 and origin = '\" + origin  + \"'\")\n                                    ^\n<console>:32: error: not found: type FlightDelaysWithWeather\n       val filtered_df = spark.read.grid[FlightDelaysWithWeather].where(\"depDelay > 0 and origin = '\" + origin  + \"'\")\n                                         ^\n"}]},"apps":[],"jobName":"paragraph_1569132212521_1270934321","id":"20190825-225726_1724838668","dateCreated":"2019-09-22T06:03:32+0000","dateStarted":"2019-09-23T11:46:15+0000","dateFinished":"2019-09-23T11:46:16+0000","status":"ERROR","progressUpdateIntervalMs":500,"$$hashKey":"object:184"},{"text":"%insightedge_jdbc\n\nselect flightNumber,  (1 -sum( depDelay15)/count(depDelay15)) as on_time_ratio, max(depDelay) as max_delay from FlightDelaysWithWeather group by flightNumber  having   count(depDelay15) > 100 order by on_time_ratio desc  limit 10\n","user":"anonymous","dateUpdated":"2019-09-22T06:03:32+0000","config":{"editorSetting":{"language":"sql","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/sql","fontSize":9,"results":{"0":{"graph":{"mode":"table","height":300,"optionOpen":false,"setting":{"table":{"tableGridState":{},"tableColumnTypeState":{"names":{"flightNumber":"string","on_time_ratio":"string","max_delay":"string"},"updated":false},"tableOptionSpecHash":"[{\"name\":\"useFilter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable filter for columns\"},{\"name\":\"showPagination\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable pagination for better navigation\"},{\"name\":\"showAggregationFooter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable a footer for displaying aggregated values\"}]","tableOptionValue":{"useFilter":false,"showPagination":false,"showAggregationFooter":false},"updated":false,"initialized":false},"multiBarChart":{"rotate":{"degree":"-45"},"xLabelStatus":"default"}},"commonSetting":{},"keys":[{"name":"flightNumber","index":0,"aggr":"sum"}],"groups":[],"values":[{"name":"on_time_ratio","index":1,"aggr":"sum"}]},"helium":{}}},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TABLE","data":"flightNumber\ton_time_ratio\tmax_delay\n2405\t0.9708994708994709\t215.0\n2107\t0.9705882352941176\t78.0\n44\t0.9606741573033708\t518.0\n2192\t0.9570552147239264\t111.0\n261\t0.9553264604810997\t138.0\n867\t0.9534368070953437\t167.0\n237\t0.9503205128205128\t207.0\n1896\t0.9487179487179487\t1086.0\n1192\t0.9464882943143813\t134.0\n1187\t0.946058091286307\t270.0\n"}]},"apps":[],"jobName":"paragraph_1569132212522_2016548109","id":"20190908-004421_1841609863","dateCreated":"2019-09-22T06:03:32+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:185"},{"user":"anonymous","dateUpdated":"2019-09-22T06:03:32+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1569132212533_1724620489","id":"20190821-004202_1739500621","dateCreated":"2019-09-22T06:03:32+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:186"}],"name":"Getting Started/FlightDelays","id":"INSIGHTEDGE-GETTING-STARTED","noteParams":{},"noteForms":{},"angularObjects":{"md:shared_process":[],"insightedge_jdbc:shared_process":[],"spark:shared_process":[]},"config":{"isZeppelinNotebookCronEnable":false,"looknfeel":"default","personalizedMode":"false"},"info":{}}